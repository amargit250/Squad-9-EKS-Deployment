name: Terraform Infrastructure

#on:
  #workflow_dispatch: # Allow manual triggers
  #push:
    #branches:
     # - dev
  #pull_request:
    #branches:
     # - dev

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.0' # Specify the version of Terraform you want to use

    - name: Cache Terraform providers
      uses: actions/cache@v2
      with:
        path: ~/.terraform.d/plugin-cache
        key: terraform-provider-${{ runner.os }}-${{ hashFiles('**/*.tf') }}
        restore-keys: |
          terraform-provider-${{ runner.os }}-

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Initialize Terraform
      run: terraform init
      working-directory: terraform-eks-project

    - name: Check if EKS Cluster Exists
      id: check_cluster
      run: |
        CLUSTER_EXISTS=$(aws eks describe-cluster --name terraform-eks-cluster --query "cluster.name" --output text || echo "not found")
        if [[ "$CLUSTER_EXISTS" != "not found" ]]; then
          echo "EKS cluster already exists, skipping apply."
          echo "apply=false" >> $GITHUB_ENV
        else
          echo "EKS cluster does not exist, proceeding with apply."
          echo "apply=true" >> $GITHUB_ENV
        fi

    - name: Terraform Plan
      id: plan
      run: terraform plan -out=tfplan
      working-directory: terraform-eks-project
      if: env.apply == 'true'  # Only run plan if resources are not present

    - name: Check for changes in Terraform Plan
      id: check_changes
      run: |
        if terraform show -no-color tfplan | grep -q 'No changes. Infrastructure is up-to-date.'; then
          echo "No changes detected, skipping apply."
          echo "apply=false" >> $GITHUB_ENV
        else
          echo "Changes detected, applying..."
          echo "apply=true" >> $GITHUB_ENV
        fi
      working-directory: terraform-eks-project
      if: env.apply == 'true'

    - name: Terraform Apply
      if: env.apply == 'true' && github.ref == 'refs/heads/dev' && github.event_name == 'push'
      run: terraform apply -auto-approve tfplan
      working-directory: terraform-eks-project

    - name: Check if EKS Cluster Exists for Destroy
      id: check_cluster_for_destroy
      run: |
        CLUSTER_EXISTS=$(aws eks describe-cluster --name terraform-eks-cluster --query "cluster.name" --output text || echo "not found")
        if [[ "$CLUSTER_EXISTS" == "not found" ]]; then
          echo "EKS cluster does not exist, skipping destroy."
          echo "destroy=false" >> $GITHUB_ENV
        else
          echo "EKS cluster exists, proceeding with destroy."
          echo "destroy=true" >> $GITHUB_ENV
        fi

    - name: Terraform Destroy (Optional - Trigger manually)
      if: github.event_name == 'workflow_dispatch' && env.destroy == 'true'
      run: |
        echo "Destroying AWS resources..."
        terraform destroy -auto-approve
      working-directory: terraform-eks-project
